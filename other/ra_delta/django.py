# Как можно улучшить django-код:
for site in Model.objects.all():
    print(site.user.email)

for site in Model.objects.select_related('user'):
    print(site.user.email)
# Для обнаружения подобной проблемы можно использовать логи запросов к БД

# 5
# У нас есть интернет-магазин на Django. Товар в нём представлен очень разнообразный, поэтому для каждой категории товара выделена отдельная модель, которая содержит специфические для неё поля. Для каждой категории товара у нас подготовлены отдельные view (20+ штук), которые содержат детализированные фильтры.
# Конечные урлы имеют вид:
#
# для списка товаров в категории:
# /catalog/<uniq_category_slug>/
# /catalog/<uniq_category_slug>/page-2
# /catalog/<uniq_category_slug>/page-3
# ...
#
# для информации о товаре:
# /catalog/<uniq_category_slug>/<product_slug>-detail
#
# Мы хотим узнать, какие категории больше всего интересуют наших посетителей. Для этого создали модель, в которую планируем записывать эту информацию:
# ```
# class UserVisits(models.Model):
#     user = models.ForeignKey(User)
#     category = models.ForeignKey(Category)
#     date = models.DateTimeField()
#     visits = models.PositiveIntegerField(default=0)
# ```
#
# Каким образом нам начать собирать эту статистику, чтобы не пришлось в каждом из view прописывать логику по её сбору?

# Для сбора статистики посещений категорий товаров из разных view можно использовать middleware в Django. Middleware - это слой, который находится между веб-сервером и Django-приложением, и позволяет выполнять дополнительные операции на каждом этапе запроса и ответа.
#
# Для сбора статистики посещений категорий товаров можно написать middleware, который будет обрабатывать запросы к url-адресам, начинающимся с /catalog/. В middleware можно получить информацию о категории товара из url-адреса, и затем обновлять соответствующую запись в базе данных UserVisits.